/**
\mainpage
\htmlinclude manifest.html

This package provides object detection algorithms and their adaptions to ROS.

Like in almost every pattern recognition software, there is a training and an
application stage.

\section Training
To train the detector, do the following steps:
-# roslaunch object_detection \<desired detector\>.launch
-# roslaunch object_detection trainer.launch
-# Select the object of interest (the target) in the Trainer GUI,
      following the instructions you can see in the console output.
-# When the training is finished (see ROS log of object_detector),
      you can shut down the trainer launch.

\em Note: the trained object is stored persistent in object_detector/models and
           will automatically be loaded when the object detector is launched (not all detectors support this though).

\section Application
The detector has to be trained before, the trained object model has to lie in object_detector/models.
-# roslaunch object_detection object_detector.launch.
-# Detections are now published in object_detector/detections, to show the detections, run
   roslaunch object_detection display.launch

Different detectors for different scenarios are implemented. One is based on color and shape, all others are feature based.
- ColorShapeDetectorNode
- Features2D2DDetectorNode
- Features2D3DDetectorNode
- Features3D2DDetectorNode

<!--
Provide links to specific auto-generated API documentation within your
package that is of particular interest to a reader. Doxygen will
document pretty much every part of your code, so do your best here to
point the reader to the actual API.

If your codebase is fairly large or has different sets of APIs, you
should use the doxygen 'group' tag to keep these APIs together. For
example, the roscpp documentation has 'libros' group.
-->


*/
